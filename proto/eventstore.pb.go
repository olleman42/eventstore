// Code generated by protoc-gen-go.
// source: eventstore.proto
// DO NOT EDIT!

/*
Package eventstore is a generated protocol buffer package.

It is generated from these files:
	eventstore.proto

It has these top-level messages:
	GetHistoryRequest
	GetTypeHistoryRequest
	GetAggregateHistoryRequest
	Event
	StoreEventRequest
	StoreEventResponse
*/
package eventstore

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetHistoryRequest struct {
}

func (m *GetHistoryRequest) Reset()                    { *m = GetHistoryRequest{} }
func (m *GetHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*GetHistoryRequest) ProtoMessage()               {}
func (*GetHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetTypeHistoryRequest struct {
	Type string `protobuf:"bytes,1,opt,name=Type" json:"Type,omitempty"`
}

func (m *GetTypeHistoryRequest) Reset()                    { *m = GetTypeHistoryRequest{} }
func (m *GetTypeHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTypeHistoryRequest) ProtoMessage()               {}
func (*GetTypeHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetTypeHistoryRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type GetAggregateHistoryRequest struct {
	Type        string `protobuf:"bytes,1,opt,name=Type" json:"Type,omitempty"`
	AggregateID string `protobuf:"bytes,2,opt,name=AggregateID" json:"AggregateID,omitempty"`
}

func (m *GetAggregateHistoryRequest) Reset()                    { *m = GetAggregateHistoryRequest{} }
func (m *GetAggregateHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAggregateHistoryRequest) ProtoMessage()               {}
func (*GetAggregateHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetAggregateHistoryRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GetAggregateHistoryRequest) GetAggregateID() string {
	if m != nil {
		return m.AggregateID
	}
	return ""
}

type Event struct {
	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Event) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type StoreEventRequest struct {
	Event []byte `protobuf:"bytes,1,opt,name=Event,proto3" json:"Event,omitempty"`
}

func (m *StoreEventRequest) Reset()                    { *m = StoreEventRequest{} }
func (m *StoreEventRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreEventRequest) ProtoMessage()               {}
func (*StoreEventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *StoreEventRequest) GetEvent() []byte {
	if m != nil {
		return m.Event
	}
	return nil
}

type StoreEventResponse struct {
	Error string `protobuf:"bytes,1,opt,name=Error" json:"Error,omitempty"`
}

func (m *StoreEventResponse) Reset()                    { *m = StoreEventResponse{} }
func (m *StoreEventResponse) String() string            { return proto.CompactTextString(m) }
func (*StoreEventResponse) ProtoMessage()               {}
func (*StoreEventResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *StoreEventResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*GetHistoryRequest)(nil), "eventstore.GetHistoryRequest")
	proto.RegisterType((*GetTypeHistoryRequest)(nil), "eventstore.GetTypeHistoryRequest")
	proto.RegisterType((*GetAggregateHistoryRequest)(nil), "eventstore.GetAggregateHistoryRequest")
	proto.RegisterType((*Event)(nil), "eventstore.Event")
	proto.RegisterType((*StoreEventRequest)(nil), "eventstore.StoreEventRequest")
	proto.RegisterType((*StoreEventResponse)(nil), "eventstore.StoreEventResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EventStore service

type EventStoreClient interface {
	GetHistory(ctx context.Context, in *GetHistoryRequest, opts ...grpc.CallOption) (EventStore_GetHistoryClient, error)
	GetTypeHistory(ctx context.Context, in *GetTypeHistoryRequest, opts ...grpc.CallOption) (EventStore_GetTypeHistoryClient, error)
	GetAggregateHistory(ctx context.Context, in *GetAggregateHistoryRequest, opts ...grpc.CallOption) (EventStore_GetAggregateHistoryClient, error)
	StoreEvent(ctx context.Context, in *StoreEventRequest, opts ...grpc.CallOption) (*StoreEventResponse, error)
}

type eventStoreClient struct {
	cc *grpc.ClientConn
}

func NewEventStoreClient(cc *grpc.ClientConn) EventStoreClient {
	return &eventStoreClient{cc}
}

func (c *eventStoreClient) GetHistory(ctx context.Context, in *GetHistoryRequest, opts ...grpc.CallOption) (EventStore_GetHistoryClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EventStore_serviceDesc.Streams[0], c.cc, "/eventstore.EventStore/GetHistory", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventStoreGetHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventStore_GetHistoryClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type eventStoreGetHistoryClient struct {
	grpc.ClientStream
}

func (x *eventStoreGetHistoryClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventStoreClient) GetTypeHistory(ctx context.Context, in *GetTypeHistoryRequest, opts ...grpc.CallOption) (EventStore_GetTypeHistoryClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EventStore_serviceDesc.Streams[1], c.cc, "/eventstore.EventStore/GetTypeHistory", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventStoreGetTypeHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventStore_GetTypeHistoryClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type eventStoreGetTypeHistoryClient struct {
	grpc.ClientStream
}

func (x *eventStoreGetTypeHistoryClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventStoreClient) GetAggregateHistory(ctx context.Context, in *GetAggregateHistoryRequest, opts ...grpc.CallOption) (EventStore_GetAggregateHistoryClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EventStore_serviceDesc.Streams[2], c.cc, "/eventstore.EventStore/GetAggregateHistory", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventStoreGetAggregateHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventStore_GetAggregateHistoryClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type eventStoreGetAggregateHistoryClient struct {
	grpc.ClientStream
}

func (x *eventStoreGetAggregateHistoryClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventStoreClient) StoreEvent(ctx context.Context, in *StoreEventRequest, opts ...grpc.CallOption) (*StoreEventResponse, error) {
	out := new(StoreEventResponse)
	err := grpc.Invoke(ctx, "/eventstore.EventStore/StoreEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EventStore service

type EventStoreServer interface {
	GetHistory(*GetHistoryRequest, EventStore_GetHistoryServer) error
	GetTypeHistory(*GetTypeHistoryRequest, EventStore_GetTypeHistoryServer) error
	GetAggregateHistory(*GetAggregateHistoryRequest, EventStore_GetAggregateHistoryServer) error
	StoreEvent(context.Context, *StoreEventRequest) (*StoreEventResponse, error)
}

func RegisterEventStoreServer(s *grpc.Server, srv EventStoreServer) {
	s.RegisterService(&_EventStore_serviceDesc, srv)
}

func _EventStore_GetHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetHistoryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventStoreServer).GetHistory(m, &eventStoreGetHistoryServer{stream})
}

type EventStore_GetHistoryServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type eventStoreGetHistoryServer struct {
	grpc.ServerStream
}

func (x *eventStoreGetHistoryServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _EventStore_GetTypeHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTypeHistoryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventStoreServer).GetTypeHistory(m, &eventStoreGetTypeHistoryServer{stream})
}

type EventStore_GetTypeHistoryServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type eventStoreGetTypeHistoryServer struct {
	grpc.ServerStream
}

func (x *eventStoreGetTypeHistoryServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _EventStore_GetAggregateHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAggregateHistoryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventStoreServer).GetAggregateHistory(m, &eventStoreGetAggregateHistoryServer{stream})
}

type EventStore_GetAggregateHistoryServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type eventStoreGetAggregateHistoryServer struct {
	grpc.ServerStream
}

func (x *eventStoreGetAggregateHistoryServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _EventStore_StoreEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServer).StoreEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventstore.EventStore/StoreEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServer).StoreEvent(ctx, req.(*StoreEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eventstore.EventStore",
	HandlerType: (*EventStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreEvent",
			Handler:    _EventStore_StoreEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetHistory",
			Handler:       _EventStore_GetHistory_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTypeHistory",
			Handler:       _EventStore_GetTypeHistory_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAggregateHistory",
			Handler:       _EventStore_GetAggregateHistory_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "eventstore.proto",
}

func init() { proto.RegisterFile("eventstore.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x92, 0xdd, 0x4a, 0xc3, 0x40,
	0x10, 0x85, 0x9b, 0xa2, 0x82, 0x47, 0x11, 0x33, 0x55, 0x28, 0x11, 0xa5, 0xee, 0x85, 0xf8, 0x03,
	0x45, 0xf4, 0x09, 0x94, 0x4a, 0x54, 0xf0, 0x26, 0xf6, 0x05, 0x22, 0x0c, 0xc1, 0x9b, 0x6e, 0xdc,
	0x8c, 0x42, 0x1f, 0xcf, 0x37, 0x93, 0x9d, 0x44, 0x93, 0x34, 0x06, 0x7a, 0xb7, 0x33, 0x73, 0xce,
	0xd9, 0xc9, 0x97, 0xc5, 0x3e, 0x7f, 0xf1, 0x42, 0x0a, 0xb1, 0x8e, 0xa7, 0xb9, 0xb3, 0x62, 0x09,
	0x75, 0xc7, 0x8c, 0x10, 0xc6, 0x2c, 0x8f, 0xef, 0xbe, 0x5a, 0x26, 0xfc, 0xf1, 0xc9, 0x85, 0x98,
	0x2b, 0x1c, 0xc6, 0x2c, 0xf3, 0x65, 0xce, 0xed, 0x01, 0x11, 0x36, 0x7c, 0x77, 0x1c, 0x4c, 0x82,
	0xf3, 0xed, 0x44, 0xcf, 0x26, 0x41, 0x14, 0xb3, 0xdc, 0x65, 0x99, 0xe3, 0x2c, 0x95, 0x35, 0x1c,
	0x34, 0xc1, 0xce, 0x9f, 0xfc, 0x69, 0x36, 0x1e, 0xea, 0xa8, 0xd9, 0x32, 0x47, 0xd8, 0x7c, 0xf0,
	0x3b, 0x7a, 0xfb, 0x2c, 0x95, 0x54, 0xed, 0xbb, 0x89, 0x9e, 0xcd, 0x05, 0xc2, 0x57, 0xbf, 0xbb,
	0x2a, 0x7e, 0xef, 0x39, 0xa8, 0x1c, 0x95, 0xb2, 0x2c, 0xcc, 0x25, 0xa8, 0x29, 0x2d, 0x72, 0xbb,
	0x28, 0x58, 0xb5, 0xce, 0x59, 0x57, 0x2d, 0x55, 0x16, 0x37, 0xdf, 0x43, 0x40, 0x75, 0xea, 0xa0,
	0x7b, 0xa0, 0x06, 0x43, 0xc7, 0xd3, 0x06, 0xc5, 0x0e, 0xb0, 0x28, 0x6c, 0x8e, 0xcb, 0xab, 0x07,
	0xd7, 0x01, 0x3d, 0x63, 0xaf, 0xcd, 0x91, 0x4e, 0x57, 0x72, 0xba, 0x8c, 0xfb, 0xb2, 0xe6, 0x18,
	0xfd, 0x83, 0x99, 0xce, 0x56, 0x02, 0x7b, 0xfe, 0x43, 0x5f, 0xea, 0x0b, 0x50, 0x03, 0x6a, 0x7f,
	0x65, 0x87, 0x71, 0x74, 0xd2, 0x37, 0x2e, 0xb9, 0x9a, 0xc1, 0xdb, 0x96, 0x3e, 0xb0, 0xdb, 0x9f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xd9, 0x81, 0x6d, 0x36, 0x74, 0x02, 0x00, 0x00,
}
